<Well? Which one?>
A simple Yes or No will suffice. Anything beyond this springs from evil.
MATTHEW 5:37, New Testament

We've used some operators to produce numeric values (+, -, *, /, and so on), or string values (concatenation using +).

It's time we get acquainted with operators that produce boolean values. Let's start with comparison operators. Some questions are best answered with a simple yes or no and this is what comparison operators are here for.

// is less than; is greater than
3 < 9 // true
9 > 9 // false

// is equal to; is not equal to
9 === 5 // false
3.14 !== 4.13 // true

// is less than or equal to; is greater than or equal to
-2 <= -20 // false
5 >= 5 // true


If you print any of these expressions with console.log, JavaScript will output true or false, the boolean value of the expression. And, of course you can (and most probably will) be using these operators with variables as operands and even combine them with arithmetic operators.

var benchmark = 9000;
var average = 5000;
var secondForm = 3500;
var bonus = 501;

var isOver9000 = (average + secondForm + bonus) > benchmark;

console.log(isOver9000); // outputs true

These operators will mostly be used with numbers, but JavaScript also allows you to compare strings, based on standard alphabetical ordering.

'a' < 'b' // true
'mario' > 'zelda' // false

// beware of strings representing numbers
'2' > '12' // true: alphabetically the character '1' comes before '2'

Here's another pro tip: when naming variables which are supposed to hold boolean values, try to use something like a question that should be answered in one of two possibilities: isConnected; hasPowerUp; isMoving;

Show me the code!

Declare a variable named speed and set it equal to 90.

Then declare a second variable named busExplodes and assign it the result of a comparison expression that checks if speed is lesser than 80.

Print the result to the console.